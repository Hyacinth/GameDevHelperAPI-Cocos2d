
#import "Physics_LoadSpritesWithPhysicalBody.h"

#pragma mark - Physics_LoadSpritesWithPhysicalBody

@implementation Physics_LoadSpritesWithPhysicalBody

-(id)init{
    self = [super init];
    if(self){
        
    }
    return self;
}

-(void) initPhysics
{
	
	CGSize s = [[CCDirector sharedDirector] winSize];
	
	b2Vec2 gravity;
	gravity.Set(0.0f, -10.0f);
	world = new b2World(gravity);
	
	
	// Do we want to let bodies sleep?
	world->SetAllowSleeping(true);
	
	world->SetContinuousPhysics(true);
		
	
	// Define the ground body.
	b2BodyDef groundBodyDef;
	groundBodyDef.position.Set(0, 0); // bottom-left corner
	
	// Call the body factory which allocates memory for the ground body
	// from a pool and creates the ground box shape (also from a pool).
	// The body is also added to the world.
	b2Body* groundBody = world->CreateBody(&groundBodyDef);
	
	// Define the ground box shape.
	b2EdgeShape groundBox;
	
	// bottom
	
	groundBox.Set(b2Vec2(0,0), b2Vec2(s.width/PTM_RATIO,0));
	groundBody->CreateFixture(&groundBox,0);
	
	// top
	groundBox.Set(b2Vec2(0,s.height/PTM_RATIO), b2Vec2(s.width/PTM_RATIO,s.height/PTM_RATIO));
	groundBody->CreateFixture(&groundBox,0);
	
	// left
	groundBox.Set(b2Vec2(0,s.height/PTM_RATIO), b2Vec2(0,0));
	groundBody->CreateFixture(&groundBox,0);
	
	// right
	groundBox.Set(b2Vec2(s.width/PTM_RATIO,s.height/PTM_RATIO), b2Vec2(s.width/PTM_RATIO,0));
	groundBody->CreateFixture(&groundBox,0);
}

-(void) update: (ccTime) dt
{
	//It is recommended that a fixed time step is used with Box2D for stability
	//of the simulation, however, we are using a variable time step here.
	//You need to make an informed choice, the following URL is useful
	//http://gafferongames.com/game-physics/fix-your-timestep/
	
	int32 velocityIterations = 8;
	int32 positionIterations = 1;
	
	// Instruct the world to perform a single step of simulation. It is
	// generally best to keep the time step and iterations fixed.
	world->Step(dt, velocityIterations, positionIterations);
}


-(NSString*)initTest{

    CGSize s = [CCDirector sharedDirector].winSize;
    
    [self initPhysics];
    
    
    GHDebugDrawLayer* debugDraw = [GHDebugDrawLayer debugDrawLayerWithWorld:world];
    [self addChild:debugDraw z:1000];
    
#if 1
		// Use batch node. Faster
        //when using batches - load a batch node using the generated image
        batchNodeParent = [CCSpriteBatchNode batchNodeWithFile:@"RES_Physics_LoadSpritesWithPhysicalBody/PhysicalSpritesObjects_Objects.png" capacity:100];
    
		[self addChild:batchNodeParent z:0];
#endif
        

        //load into the sprite frame cache the plist generated by SH
        [[CCSpriteFrameCache sharedSpriteFrameCache] addSpriteFramesWithFile:@"RES_Physics_LoadSpritesWithPhysicalBody/PhysicalSpritesObjects_Objects.plist"];

		[self executeTestCodeAtPosition:ccp(s.width/2, s.height/2)];
    
    return @"Tap screen to create physical sprites.";
}

-(void)executeTestCodeAtPosition:(CGPoint)p
{
    NSArray *spriteFrameNames = [NSArray arrayWithObjects:
                                 @"backpack",
                                 @"banana",
                                 @"bananabunch",
                                 @"canteen",
                                 @"hat",
                                 @"pineapple",
                                 @"statue",
                                 @"ball",
                                 nil];
    
    int spriteNameIdx = arc4random() % [spriteFrameNames count];
    
    NSString* sprFrameName = [spriteFrameNames objectAtIndex:spriteNameIdx];
    
    //set the current world you want to use when creating bodies
    //in case you have multiple worlds just set the coresponding world before creating the sprites
    //CAREFULL - when deleting the box2d world you should also pass NULL to this method
    [[GHDirector sharedDirector] setPhysicalWorld:world];
    
    //set your custom PTM_RATIO
    [[GHDirector sharedDirector] setPointToMeterRatio:PTM_RATIO];
    
    //if you want to load color, opacity and other properties set on sprites inside SH
    //you must use a GHSprite to do that.
    //GHSprite is a subclass of CCSprite that adds some helper methods
    GHSprite* newSpr = [GHSprite spriteWithSpriteFrameName:sprFrameName];
    
    
    //else you can also use a CCSprite
//    CCSprite* newSpr = [CCSprite spriteWithSpriteFrameName:sprFrameName];
    
    
    [newSpr setPosition:p];
    
    
    if(batchNodeParent != nil){//if we use batch nodes we must add the sprite to its batch parent
        [batchNodeParent addChild:newSpr];
    }
    else{//if we dont use batch nodes then we must add the sprite to a normal node - e.g the layer or another node
        [self addChild:newSpr];
    }
}

-(void)dealloc{
    
    delete world;
    world = NULL;
    
//    delete m_debugDraw;
//    m_debugDraw = NULL;
    
    
    [[GHDirector sharedDirector] setPhysicalWorld:NULL];
    
    [super dealloc];
}
@end













////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#pragma mark - AppDelegate

#ifdef __CC_PLATFORM_IOS

@implementation AppController

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    NSMutableDictionary* options = nil;
    if(launchOptions == nil){
        options = [NSMutableDictionary dictionary];
    }
    else{
        options = [NSMutableDictionary dictionaryWithDictionary:launchOptions];
    }
    [options setObject:[NSNumber numberWithBool:YES] forKey:@"GH_SET_AS_PORTRAIT"];
    
    
    
    
	[super application:application didFinishLaunchingWithOptions:options];
    
	// Turn on display FPS
	[director_ setDisplayStats:YES];
    
	// Turn on multiple touches
	[director_.view setMultipleTouchEnabled:YES];
    
	// 2D projection
	[director_ setProjection:kCCDirectorProjection2D];
    //	[director_ setProjection:kCCDirectorProjection3D];
    
	// Enables High Res mode (Retina Display) on iPhone 4 and maintains low res on all other devices
	if( ! [director_ enableRetinaDisplay:YES] )
		CCLOG(@"Retina Display Not supported");
    
    
	// Default texture format for PNG/BMP/TIFF/JPEG/GIF images
	// It can be RGBA8888, RGBA4444, RGB5_A1, RGB565
	// You can change anytime.
	[CCTexture2D setDefaultAlphaPixelFormat:kCCTexture2DPixelFormat_RGBA8888];
    
	// Assume that PVR images have the alpha channel premultiplied
	[CCTexture2D PVRImagesHavePremultipliedAlpha:YES];
    
	// If the 1st suffix is not found, then the fallback suffixes are going to used. If none is found, it will try with the name without suffix.
	// On iPad HD  : "-ipadhd", "-ipad",  "-hd"
	// On iPad     : "-ipad", "-hd"
	// On iPhone HD: "-hd"
	CCFileUtils *sharedFileUtils = [CCFileUtils sharedFileUtils];
	[sharedFileUtils setEnableFallbackSuffixes:YES];			// Default: NO. No fallback suffixes are going to be used
	[sharedFileUtils setiPhoneRetinaDisplaySuffix:@"-hd"];		// Default on iPhone RetinaDisplay is "-hd"
	[sharedFileUtils setiPadSuffix:@"-ipad"];					// Default on iPad is "ipad"
	[sharedFileUtils setiPadRetinaDisplaySuffix:@"-ipadhd"];	// Default on iPad RetinaDisplay is "-ipadhd"
    
	// add layer
	CCScene *scene = [CCScene node];
	id layer = [TEST_CLASS node];
	[scene addChild:layer z:0];
    
	[director_ pushScene: scene];
    
	return YES;
}

@end

#elif defined(__CC_PLATFORM_MAC)

#pragma mark AppController - Mac

@implementation AppController

- (void)applicationDidFinishLaunching:(NSNotification *)aNotification
{
	[super applicationDidFinishLaunching:aNotification];
    
	// add layer
	CCScene *scene = [CCScene node];
	[scene addChild: [TEST_CLASS node] ];
    
	[director_ runWithScene:scene];
}
@end
#endif

