
#import "Sprites_CreateAnimationsFromSpritesPlistTest.h"


@implementation Sprites_CreateAnimationsFromSpritesPlistTest

-(void) dealloc
{
	[super dealloc];
}

-(NSString*)initTest
{
     CGSize s = [CCDirector sharedDirector].winSize;
    
#if 1
		// Use batch node. Faster
        //when using batches - load a batch node using the generated image
		batchNodeParent = [CCSpriteBatchNode batchNodeWithFile:@"RES_Sprites_CreateAnimationsFromSpritesPlistTest/createAnims_trimRotateTest.png"
                                                      capacity:100];
		[self addChild:batchNodeParent z:0];
#endif
        

        //load into the sprite frame cache the plist generated by SH
        [[CCSpriteFrameCache sharedSpriteFrameCache] addSpriteFramesWithFile:@"RES_Sprites_CreateAnimationsFromSpritesPlistTest/createAnims_trimRotateTest.plist"];
    
		[self executeTestCodeAtPosition:ccp(s.width/2, s.height/2)];
    
    return @"Tap to create sprite sheet animation\nDemonstrate use of trim and rotation in a sprite sheet.";
}

-(void)executeTestCodeAtPosition:(CGPoint)p
{
    NSMutableArray* frames = [NSMutableArray array];
    
    for(int i = 1; i < 13; ++i)
    {
        NSString* frameName = [NSString stringWithFormat:@"TrimAnimation_%d.png", i];
        CCSpriteFrame *frm = [[CCSpriteFrameCache sharedSpriteFrameCache] spriteFrameByName:frameName];
        [frames addObject:frm];
    }
    
    CCAnimation *anim = [CCAnimation  animationWithSpriteFrames:frames
                                                          delay:0.8];
    
    CCAnimate *animAction = [CCAnimate actionWithAnimation:anim];
    
    GHSprite * newSpr = [GHSprite spriteWithSpriteFrameName:@"TrimAnimation_1.png"];
    
//    CCSprite* newSpr = [CCSprite spriteWithSpriteFrameName:@"TrimAnimation_1.png"];
    
    if(batchNodeParent != nil){//if we use batch nodes we must add the sprite to its batch parent
        [batchNodeParent addChild:newSpr];
    }
    else{//if we dont use batch nodes then we must add the sprite to a normal node - e.g the layer or another node
        [self addChild:newSpr];
    }

    [newSpr setPosition:p];
        
    [newSpr runAction:animAction];
}

@end









////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


#pragma mark - AppDelegate

#ifdef __CC_PLATFORM_IOS

@implementation AppController

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    NSMutableDictionary* options = nil;
    if(launchOptions == nil){
        options = [NSMutableDictionary dictionary];
    }
    else{
        options = [NSMutableDictionary dictionaryWithDictionary:launchOptions];
    }
    [options setObject:[NSNumber numberWithBool:NO] forKey:@"GH_SET_AS_PORTRAIT"];
    
    

    
	[super application:application didFinishLaunchingWithOptions:launchOptions];

	// Turn on display FPS
	[director_ setDisplayStats:YES];

	// Turn on multiple touches
	[director_.view setMultipleTouchEnabled:YES];

	// 2D projection
	[director_ setProjection:kCCDirectorProjection2D];
//	[director_ setProjection:kCCDirectorProjection3D];

	// Enables High Res mode (Retina Display) on iPhone 4 and maintains low res on all other devices
	if( ! [director_ enableRetinaDisplay:YES] )
		CCLOG(@"Retina Display Not supported");

    
	// Default texture format for PNG/BMP/TIFF/JPEG/GIF images
	// It can be RGBA8888, RGBA4444, RGB5_A1, RGB565
	// You can change anytime.
	[CCTexture2D setDefaultAlphaPixelFormat:kCCTexture2DPixelFormat_RGBA8888];

	// Assume that PVR images have the alpha channel premultiplied
	[CCTexture2D PVRImagesHavePremultipliedAlpha:YES];

	// If the 1st suffix is not found, then the fallback suffixes are going to used. If none is found, it will try with the name without suffix.
	// On iPad HD  : "-ipadhd", "-ipad",  "-hd"
	// On iPad     : "-ipad", "-hd"
	// On iPhone HD: "-hd"
	CCFileUtils *sharedFileUtils = [CCFileUtils sharedFileUtils];
	[sharedFileUtils setEnableFallbackSuffixes:YES];			// Default: NO. No fallback suffixes are going to be used
	[sharedFileUtils setiPhoneRetinaDisplaySuffix:@"-hd"];		// Default on iPhone RetinaDisplay is "-hd"
	[sharedFileUtils setiPadSuffix:@"-ipad"];					// Default on iPad is "ipad"
	[sharedFileUtils setiPadRetinaDisplaySuffix:@"-ipadhd"];	// Default on iPad RetinaDisplay is "-ipadhd"

	// add layer
	CCScene *scene = [CCScene node];
	id layer = [TEST_CLASS node];
	[scene addChild:layer z:0];

	[director_ pushScene: scene];

	return YES;
}
     
@end

#elif defined(__CC_PLATFORM_MAC)

#pragma mark AppController - Mac

@implementation AppController

- (void)applicationDidFinishLaunching:(NSNotification *)aNotification
{
	[super applicationDidFinishLaunching:aNotification];

	// add layer
	CCScene *scene = [CCScene node];
	[scene addChild: [TEST_CLASS node] ];

	[director_ runWithScene:scene];
}
@end
#endif
